<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated directly with the
      actor and its management.
-->

<document signature="Hero Lab Structure">

  <!-- Actor component
        Encapsulates all the details associated with every actor
  -->
  <component
    id="Actor"
    name="Actor"
    autocompset="no"
    ispublic="no">

    <field
      id="initPrimary"
      name="Primary initiative"
      type="derived"
      defvalue="={d20+1}">
      </field>

    <field
      id="initTiebreaker"
      name="Tiebreaker initiative"
      type="derived"
      defvalue="={1d10+2}">
      </field>

    <field
      id="initSurprise"
      name="Surprise roll"
      type="derived"
      defvalue="={+2d6}">
      </field>

    <!-- Image to display in the TacCon -->
    <field
      id="acTacImage"
      name="Image"
      type="derived">
      </field>

    <!-- Number of hands of equipment the actor can use simultaneously -->
    <field
      id="acHands"
      name="Hands Available"
      type="derived"
      defvalue="2">
      </field>

    <!-- Minimum (starting) health for the actor -->
    <field
      id="acHPMin"
      name="Min Health"
      type="derived">
      <!-- Calculate the base health value for the actor from its pieces. We have to
            calculate the value from its pieces instead of just getting the net trait
            value. This is because Health must be calculated BEFORE the final value
            for derived traits, since derived traits may be influenced by the net health
            (e.g. attack penalties after taking sufficient damage).
      -->
      <calculate phase="Traits" priority="5000" name="Calc acHPMin"><![CDATA[
        @value = #traitbonus[trHealth] + #traitinplay[trHealth]
        ]]></calculate>
      </field>

    <!-- Minimum (starting) health for the actor -->
    <field
      id="acStressMin"
      name="Min Stress"
      type="derived">
      <calculate phase="Traits" priority="5000" name="Calc acStressMin"><![CDATA[
        @value = #traitbonus[trStress] + #traitinplay[trStress]
        ]]></calculate>
      </field>
	  
    <!-- Bonus health for the actor -->
    <field
      id="acHPBonus"
      name="Bonus Health"
      type="derived">
      <!-- Calculate any health bonus that the actor receives from other sources.
      -->
      <calculate phase="Traits" priority="5000" name="Calc acHPBonus"><![CDATA[
        ~.... add any suitable code here to calculate this for the game system ....
        @value = 0
        ]]></calculate>
      </field>
	  
    <!-- Bonus Stress for the actor -->
    <field
      id="acStressBonus"
      name="Bonus Stress"
      type="derived">
      <!-- Calculate any health bonus that the actor receives from other sources.
      -->
      <calculate phase="Traits" priority="5000" name="Calc acStressBonus"><![CDATA[
        ~.... add any suitable code here to calculate this for the game system ....
        @value = 0
        ]]></calculate>
      </field>
	  
    <!-- Maximum health for the actor -->
    <field
      id="acHPMax"
      name="Max Health"
      type="derived"
      stage="minimal">
      <!-- Calculate the maximum health for the actor as the minimum plus any bonus.
      -->
      <calculate phase="Traits" priority="5002" name="Calc acHPMax">
        <after name="Calc acHPMin"/>
        <after name="Calc acHPBonus"/><![CDATA[
        @value = field[acHPMin].value + field[acHPBonus].value
        ]]></calculate>
      </field>
	  
    <!-- Maximum stress for the actor -->
    <field
      id="acStressMax"
      name="Max Stress"
      type="derived"
      stage="minimal">
      <!-- Calculate the maximum health for the actor as the minimum plus any bonus.
      -->
      <calculate phase="Traits" priority="5002" name="Calc acStressMax">
        <after name="Calc acStressMin"/>
        <after name="Calc acStressBonus"/><![CDATA[
        @value = field[acStressMin].value + field[acStressBonus].value
        ]]></calculate>
      </field>
	  
    <!-- Current health -->
    <field
      id="acHPNow"
      name="Current Health"
      type="derived"
      stage="minimal">
      <!-- Calculate the current health for the actor based on the maximum and any
            actual damage that has been sustained.
      -->
      <calculate phase="Traits" priority="5100" name="Calc acHPNow">
        <after name="Calc acHPMax"/><![CDATA[
        @value = field[acHPMax].value - hero.usagepool[DmgNetHealth].value
        ]]></calculate>
      </field>
	  
    <!-- Current stress -->
    <field
      id="acStressNow"
      name="Current Stress"
      type="derived"
      stage="minimal">
      <!-- Calculate the current stress for the actor based on the maximum and any
            actual damage that has been sustained.
      -->
      <calculate phase="Traits" priority="5100" name="Calc acStressNow">
        <after name="Calc acStressMax"/><![CDATA[
        @value = field[acStressMax].value - hero.usagepool[DmgNetStress].value
        ]]></calculate>
      </field>
	  
    <!-- Health penalty adjustment due to damage effects -->
    <field
      id="acHPPenal"
      name="Health Penalty"
      type="derived"
      maxfinal="50"
      stage="minimal">
      <!-- Calculate any penalty adjustment applied due to substantial damage effects.
            For example, if the actor has sustained enough damage, he might suffer
            penalties on attack roles.
      -->
      <calculate phase="Traits" priority="5200" name="Calc acHPPenal">
        <after name="Calc acHPNow"/><![CDATA[
        ~for our example, once an actor is down to 25% of health or less, a -1 is
        ~incurred on all attacks
        if (field[acHPNow].value / field[acHPMax].value <= .25) then
          @value = -1
        else
          @value = 0
          endif
        ]]></calculate>
      <!-- Final value for display shows any negative value in red and ignores other values -->
      <finalize><![CDATA[
        if (@value >= 0) then
          @text = ""
        else
          @text = "{text clrwarning}(" & @value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>
	  
    <!-- Stress penalty adjustment due to damage effects -->
    <field
      id="acStressPenal"
      name="Stress Penalty"
      type="derived"
      maxfinal="50"
      stage="minimal">
      <!-- Calculate any penalty adjustment applied due to substantial damage effects.
            For example, if the actor has sustained enough damage, he might suffer
            penalties on attack roles.
      -->
      <calculate phase="Traits" priority="5200" name="Calc acStressPenal">
        <after name="Calc acStressNow"/><![CDATA[
        ~for our example, once an actor is down to 25% of health or less, a -1 is
        ~incurred on all attacks
        if (field[acStressNow].value / field[acStressMax].value <= .25) then
          @value = -1
        else
          @value = 0
          endif
        ]]></calculate>
      <!-- Final value for display shows any negative value in red and ignores other values -->
      <finalize><![CDATA[
        if (@value >= 0) then
          @text = ""
        else
          @text = "{text clrwarning}(" & @value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>
	  
    <!-- Health summary for display -->
    <field
      id="acHPSumm"
      name="Health Summary"
      type="derived"
      maxfinal="50"
      stage="minimal">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000">
        <after name="Calc acHPNow"/><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = field[acHPNow].value * 10000 + field[acHPMax].value * 100 + field[acHPPenal].value
        ]]></calculate>
      <!-- Final value for display show the current and maximum health, plus any
            penalty value in parentheses.
      -->
      <finalize><![CDATA[
        @text = field[acHPNow].value & " / " & field[acHPMax].value
        if (field[acHPPenal].value < 0) then
          @text &= " {text clrwarning}(" & field[acHPPenal].value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>

    <!-- Stress point summary for display -->
    <field
      id="acStressSumm"
      name="Stress Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000">
        <after name="Calc acHPNow"/><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = field[acStressNow].value * 10000 + field[acStressMax].value * 100 + field[acStressPenal].value
        ]]></calculate>
		
      <!-- Final value for display show the current and maximum health, plus any
            penalty value in parentheses.
      -->
      <finalize><![CDATA[
        @text = field[acStressNow].value & " / " & field[acStressMax].value
        if (field[acStressPenal].value < 0) then
          @text &= " {text clrwarning}(" & field[acStressPenal].value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>

    <!-- Starting ability slots to allocate -->
    <field
      id="acStartTalents"
      name="Talent Slots"
      type="user"
      defvalue="0">
      </field>

    <!-- Starting XP for the character -->
    <field
      id="acStartXP"
      name="Starting XP"
      type="user">
      </field>

    <!-- Starting Attribute points for the character -->
    <field
      id="acStartAttrib"
      name="Starting Attribute Points"
      type="user"
      defvalue="12">
      </field>

    <field
      id="acBonusAttrib"
      name="Bonus Attribute Points"
      type="derived"
      defvalue="0">
      </field>	  

    <!-- Starting Attribute points for the character -->
    <field
      id="acStartSkillPts"
      name="Starting Skill Points"
      type="user"
      defvalue="0">
      </field>

    <field
      id="acBonusSkillPts"
      name="Bonus Skill Points"
      type="derived"
      defvalue="0">
      </field>
	  
    <!-- Starting cash for the character -->
    <field
      id="acCashCfg"
      name="Starting Cash"
      type="user"
      defvalue="100">
      </field>

    <!-- Top age to still be considered Young -->
    <field
      id="acAgeYoung"
      name="Age - Young limit"
      type="user"
      defvalue="25">
      </field>

    <!-- Top age to still be considered Adult -->
    <field
      id="acAgeAdult"
      name="Age - Adult limit"
      type="user"
      defvalue="50">
      </field>
	  
    <!-- Net cash for the character -->
    <field
      id="acCashNet"
      name="Starting Cash"
      type="derived"
      stage="capsule">
      </field>

    <!-- For NPCs, you can enter a book id (SKU) and name -->
    <field
      id="acBookId"
      name="Book Identifier / SKU"
      type="user"
      maxlength="25">
      </field>
    <field
      id="acBookName"
      name="Book Name"
      type="user"
      maxlength="100">
      </field>

    <!-- Whether character is abandoning his action in combat for benefits in the next turn  -->
    <field
      id="acAbandon"
      name="Abandoning"
      type="derived"
      persistence="full">
      </field>

    <!-- Index of the last advancement for the character -->
    <field
      id="acLastAdv"
      name="Last Advancement"
      type="derived">
      </field>


    <!-- Term to be used for the Faction -->
    <field
      id="acArchTermPri"
      name="Primary Archetype Term"
      type="derived"
      maxlength="20"
      defvalue="Archetype">
      </field>

    <!-- Name to be used for the Faction -->
    <field
      id="acArchNamePri"
      name="Primary Archetype Name"
      type="derived"
      maxlength="50">
      </field>

    <!-- Term to be used for the Secondary Archetype -->
    <field
      id="acArchTermSec"
      name="Secondary Archetype Term"
      type="derived"
      maxlength="20"
      defvalue="Archetype">
      </field>

    <!-- Name to be used for the Secondary Archetype -->
    <field
      id="acArchNameSec"
      name="Secondary Archetype Name"
      type="derived"
      maxlength="50">
      </field>
	  
    <field
      id="acArchLimPri"
      name="Tagexp to limit Pri. Arch."
      type="derived"
      maxlength="1000"
      defvalue="ArchetypeCat.Primary">
      </field>

    <field
      id="acArchLimSec"
      name="Tagexp to limit Sec. Arch."
      type="derived"
      maxlength="1000"
      defvalue="ArchetypeCat.Secondary">
      </field>
	  
    <field
      id="acArchTalPri"
      name="Pri. Arch. Talent exp."
      type="derived"
      maxlength="500">
      </field>

    <!-- Starting ability slots to allocate -->
    <field
      id="acArchTalNumPri"
      name="Pri. Arch. Talent Slots"
      type="derived"
      defvalue="0">
      </field>
	  
    <field
      id="acArchTalSec"
      name="Sec. Arch. Talent exp."
      type="derived"
      maxlength="500">
      </field>
	  
    <!-- Starting ability slots to allocate -->
    <field
      id="acArchTalNumSec"
      name="Sec. Arch. Talent Slots"
      type="derived"
      defvalue="0">
      </field>	
	  
    <!-- Optional setting-related fields -->
    <field
      id="acOptPride"
      name="Pride"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptDarkSecret"
      name="Dark Secret"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptBigDream"
      name="Big Dream"
      type="derived"
      maxlength="1000">
      </field> 
    <field
      id="acOptAgenda"
      name="Personal Agenda"
      type="derived"
      maxlength="1000">
      </field> 
    <field
      id="acOptMoralCode"
      name="Moral Code"
      type="derived"
      maxlength="1000">
      </field> 
    <field
      id="acOptHowMet"
      name="How Met"
      type="derived"
      maxlength="1000">
      </field> 

    <!-- Consumable values -->
    <field
      id="acConsumeAir"
      name="Consumable (Air)"
      type="derived"
      defvalue="0">
      </field>
    <field
      id="acConsumeAmmo"
      name="Consumable (Air)"
      type="derived"
      defvalue="0">
      </field>
    <field
      id="acConsumeFood"
      name="Consumable (Air)"
      type="derived"
      defvalue="0">
      </field>
    <field
      id="acConsumePower"
      name="Consumable (Air)"
      type="derived"
      defvalue="0">
      </field>
    <field
      id="acConsumeWater"
      name="Consumable (Air)"
      type="derived"
      defvalue="0">
      </field>	  

    <!-- Power point summary for display -->
    <field
      id="acConsumeSumm"
      name="Consumable Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="5000"><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = (herofield[acConsumeAir].value * 100000000)
        @value += (herofield[acConsumeAmmo].value * 1000000)
        @value += (herofield[acConsumeFood].value * 10000)
		@value += (herofield[acConsumePower].value * 100)
		@value += herofield[acConsumeWater].value
		
        ]]></calculate>
		
      <!-- Final value for display shows the current and maximum power points.
      -->
      <finalize><![CDATA[
	    var summary as string
		
        summary = splice(summary,"Air: " & herofield[acConsumeAir].value,", ")
        ~ summary = splice(summary,"Ammo: " & herofield[acConsumeAmmo].value,", ")
        summary = splice(summary,"Food: " & herofield[acConsumeFood].value,", ")
        summary = splice(summary,"Power: " & herofield[acConsumePower].value,", ")
        summary = splice(summary,"Water: " & herofield[acConsumeWater].value,", ")
		
		@text = summary
        ]]></finalize>
      </field>
	  
    <!-- Maximum rank for Talents with a Rank-->
    <field
      id="acTalentMaxRank"
      name="Talent Max Rank"
      type="derived"
      defvalue="1">
      </field>

    <!-- Lifepath-related fields (TBD) -->
    <field
      id="acLPTours"
      name="Number of Tours"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="acLPPromotions"
      name="Number of Promotions"
      type="derived"
      defvalue="0">
      </field>	  

    <!-- Encumbrance-related fields -->
    <field
      id="acCarryCombat"
      name="Current Combat Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <field
      id="acCarryCombatMax"
      name="Maximum Combat Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <!-- Encumbrance-related fields -->
    <field
      id="acCarryBack"
      name="Current Backpack Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <field
      id="acCarryBackMax"
      name="Maximum Backpack Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>
    <!-- Defense-related fields -->
    <!-- Best armor worn on the torso -->
    <field
      id="acDefTorso"
      name="Armor on Torso"
      type="derived">
      </field>

    <!-- Best armor worn on the head -->
    <field
      id="acDefHead"
      name="Armor on Head"
      type="derived">
      </field>

    <!-- Best armor worn on the arms -->
    <field
      id="acDefArms"
      name="Armor on Arms"
      type="derived">
      </field>

    <!-- Best armor worn on the legs -->
    <field
      id="acDefLegs"
      name="Armor on Legs"
      type="derived">
      </field>	  
    <tag group="Stage" tag="Minimal"/>

	<!-- Timing: before the existence expression on the baRace table in
       tab_basics.dat, which is currently at Initialize/10. That existence
       expression needs to come before the containerreq on rHuman, which is
       at Initialize/500 -->
	<eval index="1" phase="Initialize" priority="0" name="Process MinionSet.?"><![CDATA[
	  if (hero.tagis[MinionSet.Vehicle] <> 0) then
		perform hero.assign[Hero.FixedRace]
		perform hero.assign[Hero.Minion]
		perform hero.assign[HLOCharacterType.Vehicle]
		perform hero.assign[CharType.Vehicle]
	  elseif (hero.tagis[MinionSet.Critter] <> 0) then
		perform hero.assign[Hero.FixedRace]
		perform hero.assign[Hero.Minion]
		perform hero.assign[HLOCharacterType.NPCCritter]
		endif
	  ]]></eval>
	  
    <!-- Assign tags relating to important damage states -->
    <eval index="2" phase="Final" priority="1000"><![CDATA[
      ~if no damage has been incurred, assign a tag to indicate that state
      if (field[acHPNow].value >= field[acHPMax].value) then
        perform hero.assign[Hero.NoDamage]

      ~if the hero is dead or otherwise out of combat, indicate that state
      elseif (field[acHPNow].value = 0) then
        perform hero.assign[Hero.Dead]
        endif
      ]]></eval>

    <!-- Copy the first user image for use in the TacCon -->
    <eval index="3" phase="Final" priority="1000"><![CDATA[
      ~all heroes should be able to reroll initiative
      perform hero.assign[Hero.RerollInit]

      field[acTacImage].value = hero.findchild[UserImage,"TRUE",_CompSeq_].field[uImage].value
      ]]></eval>

    <!-- calculate the net cash possessed for the character -->
    <eval index="4" phase="Effects" priority="5000"><![CDATA[
      ~our net cash is our configured starting cash plus our accrued cash
      field[acCashNet].value = field[acCashCfg].value + hero.usagepool[TotalCash].value
      ]]></eval>
	  
    </component>

  <!-- Personal component
        Encapsulates all of the personal details tracked on the Personal tab
  -->
  <component
    id="OptFields"
    name="Optional Fields">
	
    <!-- Optional setting-related fields -->
    <field
      id="optPride"
      name="Pride"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optDarkSecret"
      name="Dark Secret"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optBigDream"
      name="Big Dream"
      type="user"
      maxlength="1000">
      </field>	
    <field
      id="optAgenda"
      name="Personal Agenda"
      type="user"
      maxlength="1000">
      </field>	
    <field
      id="optMoralCode"
      name="Moral Code"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optHowMet"
      name="How Met Group"
      type="user"
      maxlength="1000">
      </field>
	  
    <!--  -->
    <eval index="1" phase="Render" priority="1000"><![CDATA[
      ~ transfer to herofields
      herofield[acOptPride].text = field[optPride].text
      herofield[acOptDarkSecret].text = field[optDarkSecret].text
      herofield[acOptBigDream].text = field[optBigDream].text
      herofield[acOptAgenda].text = field[optAgenda].text
      herofield[acOptMoralCode].text = field[optMoralCode].text
      herofield[acOptHowMet].text = field[optHowMet].text
      ]]></eval>
    </component>	

  <component
    id="Consumables"
    name="Consumable Resources">
	
    <!-- Optional setting-related fields -->
    <field
      id="conAir"
      name="Air"
      type="derived"
      defvalue="0">
      </field>
    <field
      id="conWater"
      name="Water"
      type="derived"
      defvalue="0">
      </field>
	<field
      id="conFood"
      name="Food"
      type="derived"
      defvalue="0">
      </field>	
    <field
      id="conPower"
      name="Power"
      type="derived"
      defvalue="0">
      </field>
	  
    </component>	
	
  <!-- Personal component
        Encapsulates all of the personal details tracked on the Personal tab
  -->
  <component
    id="Personal"
    name="Personal Info"
    ispublic="no">

    <!-- Age of the actor -->
    <field
      id="perAge"
      name="Age"
      type="user"
      defvalue="25">
		
      <!-- Bound the age to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perAgeMin].value
        @maximum = field[perAgeMax].value
        ]]></bound>

      </field>

    <!-- Age of the actor -->
    <field
      id="perLPAge"
      name="Age"
      type="derived"
      defvalue="18">
	  		
      <calculate phase="Render" priority="1000"><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value += field[perAgeAdj].value
        ]]></calculate>

      </field>
	  
    <!-- Minimum age of the actor -->
    <field
      id="perAgeAdj"
      name="Age Adjustment"
      type="derived"
      defvalue="0">
      </field>
	  
    <!-- Minimum age of the actor -->
    <field
      id="perAgeMin"
      name="Minimum Age"
      type="derived"
      defvalue="15">
      </field>

    <!-- Maximum age of the actor -->
    <field
      id="perAgeMax"
      name="Maximum Age"
      type="derived"
      defvalue="75">
      </field>

    <!-- Height of the actor (in inches) -->
    <field
      id="perHeight"
      name="Height"
      type="user"
      maxfinal="20"
      defvalue="68">
      <!-- Bound the age to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perHtMin].value
        @maximum = field[perHtMax].value
        ]]></bound>
      <!-- Final value for display is converted from inches to feet and inches -->
      <finalize><![CDATA[
        ~calculate the height in terms of feet and inches
        var feet as number
        var inches as number
        feet = @value / 12
        feet = round(feet,0,-1)
        inches = @value - (feet * 12)

        ~synthesize appropriate text to display the height properly
        @text = feet & "'"
        if (inches <> 0) then
          @text = @text & " " & inches & chr(34)
          endif
        ]]></finalize>
      </field>

    <!-- Minimum height of the actor -->
    <field
      id="perHtMin"
      name="Minimum Height"
      type="derived"
      defvalue="36">
      </field>

    <!-- Maximum height of the actor -->
    <field
      id="perHtMax"
      name="Maximum Height"
      type="derived"
      defvalue="96">
      </field>

    <!-- Weight of the actor (in pounds) -->
    <field
      id="perWeight"
      name="Weight"
      type="user"
      maxfinal="20"
      defvalue="160">
      <!-- Bound the weight to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perWtMin].value
        @maximum = field[perWtMax].value
        ]]></bound>
      <!-- Final value for display includes the "lb." suffix in a different font size -->
      <finalize><![CDATA[
        @text = @text & "{size 40}lb."
        ]]></finalize>
      </field>

    <!-- Minimum weight of the actor -->
    <field
      id="perWtMin"
      name="Minimum Weight"
      type="derived"
      defvalue="30">
      </field>

    <!-- Maximum weight of the actor -->
    <field
      id="perWtMax"
      name="Maximum Weight"
      type="derived"
      defvalue="500">
      </field>

    <!-- Gender of the actor (0=male, 1=female, 2=specify) -->
    <field
      id="perGender"
      name="Gender"
      type="user"
      minvalue="0"
      maxvalue="2"
      maxfinal="100"
      nevercache="yes">
      <finalize><![CDATA[
        if (@value = 0) then
          @text = "Male"
        elseif (@value = 1) then
          @text = "Female"
        elseif (field[perGenUser].isempty = 0) then
          @text = field[perGenUser].text
        else
          @text = "No Gender"
          endif
        ]]></finalize>
      </field>
    <field
      id="perGenUser"
      name="Gender"
      type="user"
      maxlength="100">
      </field>

    <!-- Hair color -->
    <field
      id="perHair"
      name="Hair Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Eye color -->
    <field
      id="perEyes"
      name="Eye Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Skin color -->
    <field
      id="perSkin"
      name="Skin Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Background description of the actor -->
    <field
      id="perInfo"
      name="Background Text"
      type="user"
      maxlength="10000">
      </field>

    <eval index="1" phase="Setup" priority="1000"><![CDATA[
      ~ Assign a tag if the user hasn't specified any background text
      if (field[perInfo].isempty <> 0) then
        perform assign[Helper.NoPersBkgnd]
        endif
      ]]></eval>

    </component>
	
  <!-- Service component
        Encapsulates all of the personal details tracked on the Personal tab
  -->
  <component
    id="Service"
    name="Service Info"
    ispublic="yes">

    <!-- Affiliation -->
    <field
      id="serNation"
      name="Nationality"
      maxlength="50"
      type="user">
      </field>
	  
    <field
      id="serNationOut"
      name="Nationality"
      maxlength="50"
      type="derived">
      </field>
	  
    <!-- Affiliation -->
    <field
      id="serLPNation"
      name="Nationality"
      maxlength="50"
      type="derived">
      </field>
	  
    <!-- Branch -->
    <field
      id="serBranch"
      name="Service Branch"
      maxlength="50"
      type="user">
      </field>
	  
    <field
      id="serBranchOut"
      name="Service Branch"
      maxlength="50"
      type="derived">
      </field>
	  
    <!-- Rank -->
    <field
      id="serRank"
      name="Rank"
      maxlength="50"
      type="derived">
      </field>
	  
    <!-- Rank -->
    <field
      id="serRankAbrev"
      name="Rank Abreviation"
      maxlength="5"
      type="derived">
      </field>
	  
    <!-- Rank -->
    <field
      id="serRankUser"
      name="Rank"
      maxlength="50"
      type="user">
      </field>
	  
    <!-- Rank -->
    <field
      id="serRankVal"
      name="Rank Value"
      type="derived"
	  defvalue="0">
      </field>

    <eval index="1" phase="Final" priority="1000"><![CDATA[
	  if (field[serLPNation].isempty = 0) then
	    field[serNationOut].text = field[serLPNation].text
		endif
		
	  if (hero.tagis[ServiceBranch.?] <> 0) then
	    field[serBranchOut].text = hero.tagnames[ServiceBranch.?,","]
	  else
	    field[serBranchOut].text = field[serBranch].text
		endif
		
	  doneif (hero.tagis[Military.?] = 0)
	  var Rank as string
	  var RankIdx as number
	  var RankAbrev as string
	  
	  field[serRankVal].value = hero.tagvalue[MilitaryRank.?]
	  RankIdx = field[serRankVal].value - 1
	  
	  call GetRank
	  
	  field[serRank].text = Rank
	  field[serRankAbrev].text = RankAbrev
	  
      ]]></eval>
	  
    </component>

  <!-- Define various component sets associated with the components defined above.
  -->

  <!-- The "Personal" compset is auto-defined for the component -->

  <!-- Actor - all the collective one-shot details for the actor -->
  <compset
    id="Actor">
    <compref component="Actor"/>
    </compset>


  </document>
