<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Armory" tab panel. This tab is where
      the user selects weapons and armor for the character.

      All public visual elements used with this tab panel start with the prefix "ar"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">
  <portal
    id="arAmmo"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      showtemplate="SimpleAmmo"
      choosetemplate="arAmmoThing"
      choosesortset="AmmoCatType"
      buytemplate="BuyCash"
      selltemplate="SellCash"
	  columns="2">
      <list>component.Ammunition</list>
      <candidate inheritlist="yes">!(Equipment.Natural|Equipment.Hide)</candidate>
      <titlebar><![CDATA[
        @text = "Select Ammunition to Purchase from the List Below"
        ]]></titlebar>
      <headertitle><![CDATA[
        @text = "Ammunition"
        ]]></headertitle>
      <additem><![CDATA[
        @text = "Add New Ammunition"
        ]]></additem>
      </table_dynamic>
    </portal>

  <!-- arMelee portal
        Presents a dynamic table where the user can add melee weapons for the
        character.

        We use separate templates for selecting weapons and showing the weapons
        that have been chosen. Each of these appears further below.

        We use an "additem" script to simply prompt the user to add weapons.

        The "buytemplate" and "selltemplate" attributes automatically hook in the
        logic appropriate for buying and selling items for cash. When a "buytemplate"
        is specified, adding an item automatically shows the template in the lower
        right corner (beneath the description), allowing the user to control the
        purchase price. When a "selltemplate" is specified, the template is shown
        when the user clicks on the delete button, allowing the user to control the
        selling price and quantity for the item.

        We use a "candidate" tag expression to limit the choices the user can make.
        We don't want to include natural attacks as purchasable, so we omit them.
        In all other respects, the want the "candidate" tag expression to behave
        just like the "list" tag expression.

        We could specify a component of "WeapMelee" and achieve the same result,
        with one exception. For consistency and to eliminate any need for code
        duplication, all of the transaction logic for buying and selling gear is
        defined for the "Gear" component. HL invokes the buy/sell logic associated
        with the component specified, with none being invoked if the component does
        not specify the logic. Consequently, we have to specify the "Gear" component
        in order to ensure that all the buy/sell logic is invoked properly. This
        forces us to filter on the "WeapMelee" component in both the "list" and the
        "candidate" tag expressions.

        We use the default "description" behavior to generate the appropriate
        information for display to the user as a description when choosing melee
        weapons. This invokes the "Descript" procedure for the purpose.

        We use a "headertitle" script to place a suitable title above the table.
  -->
  <portal
    id="arMelee"
    style="tblNormal">
    <table_dynamic
      component="Gear"
	  headertemplate="arMeleeHdr"
      showtemplate="arWpnPick"
      choosetemplate="arWpnThing"
      choosesortset="WeaponCat"
      buytemplate="BuyCash"
      selltemplate="SellCash">
      <list>component.WeapMelee</list>
      <candidate inheritlist="yes">!(Equipment.Natural|Equipment.Hide)</candidate>
      <titlebar><![CDATA[
        @text = "Select Melee Weapons to Purchase from the List Below"
        ]]></titlebar>
      <additem><![CDATA[
        @text = "Add New Melee Weapons"
        ]]></additem>
      </table_dynamic>
    </portal>


  <!-- arRange portal
        Presents a dynamic table where the user can add ranged weapons for the
        character. This portal is identical to "arMelee" above, except that it
        manages ranged weapons instead of melee weapons, resulting in a few minor
        but important differences from the melee weapons table.
  -->
  <portal
    id="arRange"
    style="tblNormal">
    <table_dynamic
      component="Gear"
	  headertemplate="arRangedHdr"
      showtemplate="arWpnPick"
      choosetemplate="arWpnThing"
	  choosesortset="WeaponTypeByCat"
      buytemplate="BuyCash"
      selltemplate="SellCash">
      <list>component.WeapRange</list>
      <candidate inheritlist="yes">!(Equipment.Natural|Equipment.Hide)</candidate>
      <titlebar><![CDATA[
        @text = "Select Ranged or Heavy Weapons to Purchase from the List Below"
        ]]></titlebar>
      <additem><![CDATA[
        @text = "Add New Ranged or Heavy Weapons"
        ]]></additem>
      </table_dynamic>
    </portal>
	
  <!-- arDefense portal
        Presents a dynamic table where the user can add armor and shields for the
        character. This portal is identical to "arMelee" above, except that it
        manages defensive gear instead of melee weapons, resulting in a few minor
        but important differences from the melee weapons table.

        Since we show both armor AND shields in the same table, we use the "Armory"
        sortset to sort all of the armor first and then the shields below.
  -->
  <portal
    id="arDefense"
    style="tblNormal">
    <table_dynamic
      component="Gear"
      headertemplate="arDefPick"
      showtemplate="arDefPick"
      choosetemplate="arDefThing"
      showsortset="Armory"
      buytemplate="BuyCash"
      selltemplate="SellCash">
      <list>component.Defense</list>
      <candidate inheritlist="yes">!Equipment.Natural</candidate>
      <titlebar><![CDATA[
        @text = "Select Armor and Shields to Purchase from the List Below"
        ]]></titlebar>
      <additem><![CDATA[
        @text = "Add New Armor and Shields"
        ]]></additem>
      </table_dynamic>
    </portal>


  <!-- arWpnThing template
        Derived from the SimpleItem template, this template includes the weapon
        damage and purchase cost. It is specifically for showing things for the
        user to select.

        It would be reasonable to assume that we could designate the range as a
        simple field-based label portal, but that won't work. If the weapon is a
        melee weapon, it won't have the range field, so you'll get run-time errors
        when Hero Lab tries to access the field associated with the portal. The
        solution is to use a script-based label that properly checks whether the
        weapon is ranged. If so, then the field can be safely accessed. If not,
        then the text is left as empty.
  -->
  <template
    id="arWpnThing"
    name="Weapon Thing"
    compset="Weapon"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="damage"
      style="lblNormal">
	  <label>
        <labeltext><![CDATA[
          @text = field[wpDamage].text
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="range"
      style="lblDisable">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
            @text = field[wpRange].text
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="cost"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          @text = field[grCost].text
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="type"
      style="lblNormal">
      <label>
	    <labeltext><![CDATA[
          @text = tagabbrevs[WeaponType.?,","]
		  ]]></labeltext>
        </label>
      </portal>

	  
    <position><![CDATA[
      ~set up our dimensions, with a width that we dictate; our width can vary
      ~between weapon types, since ranged weapons require extra space for the range
      height = portal[name].height
      if (tagis[component.WeapRange] <> 0) then
        width = 500
      else
        width = 250
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~if this is a show-only thing, hide the damage/range/cost, then position the name
      if (tagis[thing.showonly] <> 0) then
        portal[damage].visible = 0
        portal[range].visible = 0
        portal[cost].visible = 0
        portal[type].visible = 0
        portal[name].width = width
        perform portal[name].setstyle[lblNormal]
        done
        endif
		
      ~position the cost portal on the far right
      perform portal[cost].alignedge[right,0]

      ~position the range portal to the left of the cost
	  perform portal[range].centerpoint[horz,285]

      ~position the damage portal to the left of the range
	  perform portal[damage].centerpoint[horz,225]

      ~position the damage portal to the left of the range
	  perform portal[type].centerpoint[horz,175]
	  
      ~position the name on the left and let it use all available space

      portal[name].width = minimum(portal[name].width,portal[type].left - 10)
	  perform portal[name].sizetofit[25]
	  
      ~position the cost portal on the far right
      perform portal[name].alignedge[left,0]
	  ~portal[name].left = 0
      ]]></position>

    </template>
	
  <template
    id="arAmmoThing"
    name="Ammunition Thing"
    compset="Ammunition"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal">
      <label
        field="name">
        </label>
      </portal>
<!--
    <portal
      id="damage"
      style="lblNormal">
	  <label>
        <labeltext><![CDATA[
          @text = field[amDamage].text
          ]]></labeltext>
        </label>
      </portal>
    <portal
      id="blast"
      style="lblNormal">
	  <label>
        <labeltext><![CDATA[
          @text = field[amBlast].text
          ]]></labeltext>
        </label>
      </portal>
    <portal
      id="crit"
      style="lblNormal">
	  <label>
        <labeltext><![CDATA[
          @text = field[amCrit].text
          ]]></labeltext>
        </label>
      </portal>
      <portal
        id="armorrating"
      style="lblNormal">
	  <label>
        <labeltext><![CDATA[
          @text = field[amArmorRating].text
          ]]></labeltext>
        </label>
      </portal>
      <portal
        id="armorrange"
        style="lblNormal">
        <label>
          <labeltext><![CDATA[
          @text=field[amRange].text          
          ]]></labeltext>
          </label>
        </portal>
-->
    <portal
      id="cost"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          @text = field[grCost].text
          ]]></labeltext>
        </label>
      </portal>

    <position><![CDATA[
      ~set up our dimensions, with a width that we dictate; our width can vary
      ~between weapon types, since ranged weapons require extra space for the range
      height = portal[name].height
      width = 500

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position the cost portal on the far right
      perform portal[cost].alignedge[right,0]

      ~position the damage portal to the left of the cost; we want the damage to
      ~be centered in its own column relative to a centerpoint position
      ~perform portal[damage].centerpoint[horz,180]

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      ~portal[name].width = minimum(portal[name].width,portal[damage].left - 10)
      ]]></position>

    </template>


  <!-- arWpnPick template
        Derived from the SimpleItem template, this includes the weapon damage and
        the gear button to move equipment between various containers. We also show
        the range for ranged weapons. This template is specifically for showing the
        weapons that the user has already purchased.

        For more details, please see the "arWpnThing" template above.
  -->
  <template
    id="arMeleeHdr"
    name="Melee Header"
    compset="Weapon"
    marginhorz="3"
    marginvert="3">
	
    <portal
      id="hdrTitle"
      style="lblTitle"
      isheader="yes">
      <label
        istitle="yes"
        text="Melee Weapons">
        </label>
      </portal>
	  
    <portal
      id="hdrName"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Weapon"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrReliability"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Rel"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrDamage"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Dmg"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrArmor"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
		  @text = "Arm"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrSpecial"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Notes"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrCrit"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Crit"
          ]]></labeltext>
        </label>
      </portal>
	  
    <header><![CDATA[
      ~our header height is the title plus a gap plus the header text
      height = portal[hdrTitle].height + portal[hdrName].height + 2

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~our title spans the full width of the template
      portal[hdrTitle].width = width

      ~each of our header labels has the same width as the corresponding data beneath
      perform portal[hdrName].centerpoint[horz,100]
      perform portal[hdrReliability].centerpoint[horz,190]
      perform portal[hdrDamage].centerpoint[horz,220]
      perform portal[hdrCrit].centerpoint[horz,250]
      perform portal[hdrArmor].centerpoint[horz,280]
      perform portal[hdrSpecial].centerpoint[horz,380]
	  
      ~align all header labels at the bottom of the header region
      perform portal[hdrName].alignedge[bottom,0]
      perform portal[hdrReliability].alignedge[bottom,0]
      perform portal[hdrCrit].alignedge[bottom,0]
      perform portal[hdrDamage].alignedge[bottom,0]
      perform portal[hdrArmor].alignedge[bottom,0]
      perform portal[hdrSpecial].alignedge[bottom,0]

      height = portal[hdrName].bottom
      ]]></header>
	  
    </template>
	
  <template
    id="arRangedHdr"
    name="Ranged Header"
    compset="Weapon"
    marginhorz="3"
    marginvert="3">
	
    <portal
      id="hdrTitle"
      style="lblTitle"
      isheader="yes">
      <label
        istitle="yes"
        text="Ranged &amp; Heavy Weapons">
        </label>
      </portal>
	  
    <portal
      id="hdrName"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Weapon"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrReliability"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Rel"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrDamage"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Dmg"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrCrit"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Crit"
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="hdrRange"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
		  @text = "Rng"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrArmor"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
		  @text = "Arm"
          ]]></labeltext>
        </label>
      </portal>
    <portal
      id="hdrSpecial"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Notes"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrAmmo"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Ammo Type"
          ]]></labeltext>
        </label>
      </portal>	  
 
      <portal
      id="hdrMag"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Mag"
		  ]]></labeltext>
        </label>
      </portal>

      <portal
      id="hdrROF"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "ROF"
		  ]]></labeltext>
        </label>
      </portal>	
	  
    <header><![CDATA[
      ~our header height is the title plus a gap plus the header text
      height = portal[hdrTitle].height + portal[hdrName].height + portal[hdrAmmo].height + 4

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~our title spans the full width of the template
      portal[hdrTitle].width = width

      ~each of our header labels has the same width as the corresponding data beneath
	  var hdr1 as number
	  var hdr2 as number
	  
      perform portal[hdrName].centerpoint[horz,60]
      perform portal[hdrReliability].centerpoint[horz,140]
      perform portal[hdrROF].centerpoint[horz,180]
      perform portal[hdrDamage].centerpoint[horz,220]
      perform portal[hdrCrit].centerpoint[horz,260]
      perform portal[hdrRange].centerpoint[horz,300]
      perform portal[hdrArmor].centerpoint[horz,340]
      perform portal[hdrSpecial].centerpoint[horz,380]
	  
      perform portal[hdrMag].centerpoint[horz,140]
	  perform portal[hdrAmmo].centerpoint[horz,285]	
	  
      ~align all header labels at the bottom of the header region
	  hdr1 = portal[hdrTitle].bottom + 2
	  
      portal[hdrName].top = hdr1
      portal[hdrReliability].top = hdr1
      portal[hdrROF].top = hdr1
      portal[hdrDamage].top = hdr1
      portal[hdrCrit].top = hdr1
      portal[hdrRange].top = hdr1
      portal[hdrArmor].top = hdr1
      portal[hdrSpecial].top = hdr1
      
	  hdr2 = portal[hdrName].bottom + 2
	  portal[hdrAmmo].top = hdr2
      portal[hdrMag].top = hdr2
	  
      height = portal[hdrAmmo].bottom
      ]]></header>
	  
    </template>	
	
  <template
    id="arWpnPick"
    name="Weapon Pick"
    compset="Weapon"
    marginhorz="3"
    marginvert="3">
	  
    <portal
      id="name"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to equip this weapon">
      <checkbox
        field="grIsEquip"
        dynamicfield="grStkName">
        </checkbox>
      </portal>

    <portal
      id="heldby"
      style="imgNormal">
      <image_literal
        image="gearinfo.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHeld
        ]]></mouseinfo>
      </portal>

    <portal
      id="strreq"
      style="imgNormal">
      <image_literal
        image="strengthreq.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "You do not meet this weapon's minimum strength requirement."
        ]]></mouseinfo>
      </portal>

    <portal
      id="reliability"
      style="lblNormal">
      <label>
	    <labeltext><![CDATA[
          @text = field[grReliabilityCur].value
		  ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="rof"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
		    if (empty(field[wpRateOfFire].text) = 0) then
              @text = field[wpRateOfFire].text
			else
              @text = "--"
            endif  
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="damage"
      style="lblNormal">
      <label
        field="wpDamage">
        </label>
      </portal>

    <portal
      id="crit"
      style="lblNormal">
      <label
        field="wpCrit">
        </label>
      </portal>
	  
    <portal
      id="armor"
      style="lblNormal">
      <label>
	    <labeltext><![CDATA[
          @text = signed(field[wpArmorRating].text)
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="range"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
		    if (empty(field[wpRange].text) = 0) then
              @text = field[wpRange].text
			else
              @text = "--"
            endif  
          else
            @text = ""
            endif
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="magazine"
      style="lblNormal">
      <label>
      <labeltext><![CDATA[
          if (tagis[component.WeapRange] <> 0) then
		    if (empty(field[wpCapacity].text) = 0) then
			  if (compare(field[wpCapacity].text,"0") = 0) then
			    @text = "--"
			  else
			    @text = field[wpCapacity].text
				endif
			else
              @text = "--"
            endif  
          else
            @text = ""
            endif
          ]]></labeltext>
    </label>
    </portal>


    <portal
      id="special"
      style="imgNormal">
      <image_literal
        image="special.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "Special: " & field[wpNotes].text
        ]]></mouseinfo>
      </portal>

    <portal
      id="gearmanage"
      style="actGear"
      tiptext="Click here to choose which container to place this equipment within.">
      <action
        action="gear">
        </action>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this equipment">
      <action
        action="delete">
        </action>
      </portal>
	  
    <portal
      id="ammoedit"
      style="actEdit"
      tiptext="Click here to edit the entry.">
      <action
        action="edit">
        </action>
      </portal>
	  
    <portal
      id="ammo"
      style="lblNormal">
      <label
        ismultiline="yes">
        <labeltext><![CDATA[
		  var ammoexpr as string
		  var mystring as string
		  
          if (tagcount[AmmoType.?] + tagcount[AmmoCatType.?] <> 0) then
		    if (tagcount[AmmoType.?] <> 0) then
              @text = tagnames[AmmoType.?,", "]
			else
			  ammoexpr = tagids[AmmoCatType.?,"|"]
			  
			  foreach thing in Ammunition where ammoexpr
			    mystring = splice(mystring, eachthing.field[name].text, ", ")
				nexteach
              @text = mystring
			  endif 
          else
            @text = "--"
            endif
          ]]></labeltext>
        </label>
      </portal>

    <position><![CDATA[
	  ~set up our dimensions, with a width that we dictate; our width can vary
      ~between weapon types, since ranged weapons require extra space for the range
      height = portal[info].height
	  
      width = width
	  
	  var topRow as number
	  var botRow as number
	  
	  topRow = 0
	  botRow = 4 + portal[info].height
	  
      ~set the portals by row
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[info].centervert
	  
      portal[reliability].top = topRow
      portal[damage].top = topRow
      portal[crit].top = topRow
      portal[rof].top = topRow
      portal[range].top = topRow
      portal[armor].top = topRow
      portal[gearmanage].top = topRow
      portal[strreq].top = topRow
      portal[heldby].top = topRow
	  portal[special].top = topRow
	   
      portal[ammo].top = botRow
      portal[magazine].top = botRow
      portal[ammoedit].top = botRow
	  
      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-4]

      ~position the gear portal to the left of the info button
      perform portal[gearmanage].alignrel[rtol,info,-4]
      perform portal[ammoedit].alignrel[rtol,info,-4]

      ~position the special portal to the left of the gear button; we want the
      ~note to be centered in its own column relative to a centerpoint position
      perform portal[special].centerpoint[horz,380]
      
      ~position the range portal to the left of the delete button; we want the
      ~damage to be centered in its own column relative to a centerpoint position
	  
      if (tagis[component.WeapMelee] <> 0) then
	    perform portal[armor].centerpoint[horz,340]
	  else
	    perform portal[range].centerpoint[horz,300]
	    perform portal[armor].centerpoint[horz,340]
	    endif
	  
      ~position the damage portal to the left of the range column; we want the
      ~damage to be centered in its own column relative to a centerpoint position
	  
      perform portal[rof].centerpoint[horz,180]
	  
      perform portal[damage].centerpoint[horz,220]
	  
      perform portal[crit].centerpoint[horz,260]
	  
      ~position the reliability portal to the left of damage column; we want the
      ~reliability to be centered in its own column relative to a centerpoint position
      perform portal[reliability].centerpoint[horz,140]
	  perform portal[magazine].centerpoint[horz,140]
	  
      ~If the weapon is a ranged weapon, we want to display the ammo
	  portal[ammo].left = portal[magazine].right + 4
	  portal[ammo].width = portal[ammoedit].left - portal[magazine].right - 4
	  perform portal[ammo].autoheight

      ~position the name on the left and let it use all available space
      var limit as number
      limit = portal[reliability].left - 2 - portal[heldby].width - 2 - portal[strreq].width - 2
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,limit)
	  perform portal[name].sizetofit[25]

      ~show the 'strength requirement' icon to the right of the name
      perform portal[strreq].alignrel[ltor,name,2]
      portal[strreq].visible = tagis[Helper.BadStrReq]

      ~show the 'held by' icon to the right of the strenght requirement if appropriate
      if (portal[strreq].visible = 0) then
        portal[heldby].left = portal[strreq].left
      else
        perform portal[heldby].alignrel[ltor,strreq,5]
        endif
      portal[heldby].visible = isgearheld

      if (tagis[Equipment.SelfContained] <> 0) then
	    portal[ammoedit].visible = 0
		endif
	  
      ~only show the special portal if there are special talents/notes to view
      portal[special].visible = 1 - field[wpNotes].isempty
	    
	  if (tagis[component.WeapMelee] = 0) then
	    perform portal[ammo].autoheight
		if (portal[ammo].bottom > portal[ammoedit].bottom) then
		  height = 4 + portal[ammo].bottom
		else
	      height = 4 + portal[ammoedit].bottom
		  endif
		endif
		
      ]]></position>
	  
    </template>
	
  <!-- arDefThing template
        Derived from the SimpleItem template, this includes the defense rating and
        purchase cost. This template is specifically for showing things that the
        user can select.
  -->
  <template
    id="arDefThing"
    name="Defense Thing"
    compset="Defense"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal">
      <label
        field="name">
        </label>
      </portal>
	  
    <portal
      id="defense"
      style="lblNormal">
      <label
        field="defDefense">
        </label>
      </portal>

    <portal
      id="cost"
      style="lblNormal">
      <label>
        <labeltext><![CDATA[
          @text = field[grCost].text
          ]]></labeltext>
        </label>
      </portal>

    <position><![CDATA[
      ~set up our dimensions, with a width that we dictate
      height = portal[name].height
      width = 250

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position the cost portal on the far right
      perform portal[cost].alignedge[right,0]

      ~position the defense portal to the left of the cost; we want the defense
      ~to be centered in its own column relative to a centerpoint position
      perform portal[defense].centerpoint[horz,180]

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[defense].left - 8)
      ]]></position>

    </template>
	
  <template
    id="SimpleAmmo"
    name="Simple Item"
    compset="Equipment"
    marginhorz="5"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="grStkName">
        </label>
      </portal>

    <portal
      id="heldby"
      style="imgNormal">
      <image_literal
        image="gearinfo.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHeld
        ]]></mouseinfo>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="gearmanage"
      style="actGear"
      tiptext="Click here to choose which container to place this equipment within.">
      <action
        action="gear">
        </action>
      </portal>
	  
    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if we've been assigned a non-default width for use when showing things, adopt
      ~that width now
      if (ispick = 0) then
        var size as number
        size = tagvalue[SimpleItem.width?]
        if (size > 0) then
          width = size
          endif
        endif

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~determine whether the container and heldby indicators should be visible
      portal[heldby].visible = isgearheld
	  
      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert
      perform portal[heldby].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~position the gear portal to the left of the info button
      perform portal[gearmanage].alignrel[rtol,info,-8]
	  
	  ~calculate the space to reserve for the various indicators
      var reserve as number
      if (portal[heldby].visible <> 0) then
        reserve += portal[heldby].width + 2
        endif
		
      ~if we're showing a thing, the info and delete buttons are irrelevant, since
      ~we should be showing within a chooser, in which case there's nothing to
      ~delete and we have the description already visible
      var edge as number
      if (ispick = 0) then
        portal[info].visible = 0
        portal[delete].visible = 0
        edge = width
      else
        edge = portal[info].left - 5
        endif

      ~position the name on the left and let it use all available space
      var limit as number
      limit = portal[gearmanage].left - 8 - reserve
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,limit)

      portal[heldby].left = portal[name].right + 2
	  
      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
        endif

      ~if this is an auto-added pick, change its font to indicate that fact
      if (ispick + !candelete >= 2) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>
	
  <!-- arDefPick template
        Derived from the SimpleItem template, this includes the defense rating and
        the gear button to move equipment between various containers. This template
        is specifically for showing picks that the user has already purchased.
  -->
  <template
    id="arDefPick"
    name="Defense Pick"
    compset="Defense"
    marginhorz="3"
    marginvert="3">
    <portal
      id="hdrTitle"
      style="lblTitle"
      isheader="yes">
      <label
        istitle="yes"
        text="Body Armor">
        </label>
      </portal>
	  
    <portal
      id="hdrName"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Item"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrRating"
      style="lblHeader"
      isheader="yes">
      <label>
	    <labeltext><![CDATA[
          @text = "Rating"
		  ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrLocation"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Location"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="hdrSpecial"
      style="lblHeader"
      isheader="yes">
      <label>
        <labeltext><![CDATA[
          @text = "Notes"
          ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="name"
      style="chkNormal"
      showinvalid="yes"
      tiptext="Click to equip this item">
      <checkbox
        field="grIsEquip"
        dynamicfield="grStkName">
        </checkbox>
      </portal>

    <portal
      id="heldby"
      style="imgNormal">
      <image_literal
        image="gearinfo.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        call InfoHeld
        ]]></mouseinfo>
      </portal>

    <portal
      id="strreq"
      style="imgNormal">
      <image_literal
        image="strengthreq.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "You do not meet this equipment's minimum strength requirement."
        ]]></mouseinfo>
      </portal>
	  
    <portal
      id="defense"
      style="lblNormal">
      <label
        field="defDefense">
        </label>
      </portal>
	  
    <portal
      id="location"
      style="lblNormal">
      <label>
	    <labeltext><![CDATA[
        @text = tagnames[ArmorLoc.?,", "]
        ]]></labeltext>
        </label>
      </portal>
	  
    <portal
      id="gearmanage"
      style="actGear"
      tiptext="Click here to choose which container to place this equipment within.">
      <action
        action="gear">
        </action>
      </portal>

    <portal
      id="special"
      style="imgNormal">
      <image_literal
        image="special.bmp"
        isbuiltin="yes"
        istransparent="yes">
        </image_literal>
      <mouseinfo><![CDATA[
        @text = "Special: " & field[defNotes].text
        ]]></mouseinfo>
      </portal>
	  
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this equipment">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~center the portals vertically
      perform portal[info].centervert
      perform portal[name].centervert
      perform portal[defense].centervert
      perform portal[location].centervert
      perform portal[gearmanage].centervert
      perform portal[delete].centervert
      perform portal[strreq].centervert
      perform portal[heldby].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~position the gear portal to the left of the info button
      perform portal[gearmanage].alignrel[rtol,info,-8]
	  
      perform portal[special].centerpoint[horz,420]
	  
      ~position the defense portal to the left of the delete button; we want the
      ~defense to be centered in its own column relative to a centerpoint position
      perform portal[defense].centerpoint[horz,240]

      ~position the defense portal to the left of the delete button; we want the
      ~defense to be centered in its own column relative to a centerpoint position
      perform portal[location].centerpoint[horz,315]
      ~portal[consumables].visible = field[grConsumables].isempty - 1
	  
      ~position the name on the left and let it use all available space
      var limit as number
      limit = portal[defense].left - 8 - portal[heldby].width - 5
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,limit)

      ~show the 'strength requirement' icon to the right of the name
      perform portal[strreq].alignrel[ltor,name,2]
      portal[strreq].visible = tagis[Helper.BadStrReq]

      ~show the 'held by' icon to the right of the strength requirement if appropriate
      if (portal[strreq].visible = 0) then
        portal[heldby].left = portal[strreq].left
      else
        perform portal[heldby].alignrel[ltor,strreq,5]
        endif
      portal[heldby].visible = isgearheld
	  
	  ~only show the special portal if there are special talents/notes to view
      portal[special].visible = 1 - field[defNotes].isempty
	  
      ]]></position>
	  
    <header><![CDATA[
      ~our header height is the title plus a gap plus the header text
      height = portal[hdrTitle].height + portal[hdrName].height + 3

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~our title spans the full width of the template
      portal[hdrTitle].width = width

      ~each of our header labels has the same width as the corresponding data beneath
      perform portal[hdrName].centerpoint[horz,100]
      perform portal[hdrRating].centerpoint[horz,240]
      perform portal[hdrLocation].centerpoint[horz,315]
      perform portal[hdrSpecial].centerpoint[horz,380]
	  
      ~align all header labels at the bottom of the header region
      perform portal[hdrName].alignedge[bottom,0]
      perform portal[hdrRating].alignedge[bottom,0]
      perform portal[hdrLocation].alignedge[bottom,0]
      perform portal[hdrSpecial].alignedge[bottom,0]

      ]]></header>
    </template>


  <!-- armory layout
        This layout orchestrates the display of the visual elements that comprise
        the Armory tab. This amounts to three pairs of title and table so the user
        can add melee weapons, ranged weapons, and armor/shields.

        The interesting facet of this layout is that it contains three separate
        tables that can vary in height, depending on what the user chooses to add
        to the character. These tables need to adapt their sizes to make efficient
        use of the available space. The "position" script accomplishes this goal.

        The exact steps being taken are clearly commented within the script, but
        the basic strategy is pretty simple. First the portals at the top are
        position, then the armor/shields table is positioned at the bottom with
        only two items visible. The remaining space is calculated and shared
        between the two weapon tables. Once the weapons have been given as much
        space as they need, the armor/shields table is enlarged to take up any
        additional space that is leftover.
  -->
  <layout
    id="armory">
    <portalref portal="arMelee" taborder="10"/>
    <portalref portal="arRange" taborder="20"/>
    <portalref portal="arAmmo" taborder="20"/>
    <portalref portal="arDefense" taborder="50"/>

    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
      ~set the width of all tables to the full width of the layout
      portal[arMelee].width = width
      portal[arRange].width = width
      portal[arDefense].width = width
	  portal[arAmmo].width = width
	  
	  perform portal[arMelee].autoplace[0]
	  perform portal[arRange].autoplace[10]
	  perform portal[arAmmo].autoplace[10]
	  perform portal[arDefense].autoplace[10]
	  
	  if (hero.tagis[CharType.Vehicle] <> 0) then
	    portal[arMelee].visible = 0
	    portal[arDefense].visible = 0
		portal[arRange].top = 0
	    endif
	  
      ]]></position>

    </layout>


  <!-- armory panel
        This is the "Armory" panel shown within Hero Lab. Since we want this panel
        to appear first within the second grouping (equipment), we assign it an
        "order" of 210.

        The logic for this panel is similar to the logic for the preceeding panels,
        so please refer to those panels for more details.
  -->
  <panel
    id="armory"
    name="Armory"
    marginhorz="5"
    marginvert="5"
    order="210">
    <live>!HideTab.armory</live>
    <layoutref layout="armory"/>
    <position><![CDATA[
      ]]></position>
    </panel>
  </document>
